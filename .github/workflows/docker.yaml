name: 'Docker CI'

on:
  # run on pushes to main if docker related files were changed
  push:
    branches:
      - main
      - gh-readonly-queue/main/**
#    paths:
#      - 'docker/**'
#      - '.github/workflows/docker.yaml'
  # run on pull requests that target the main branch
  pull_request:
    branches:
      - main
#    paths:
#      - 'docker/**'
#      - '.github/workflows/docker.yaml'
  # run weekly on Monday at 12:00
  schedule:
    - cron: '0 12 * * 1'

concurrency:
  # on main, we want all builds to complete even if commits/merging happens faster to make it easier to discover at which point
  # something broke; else, we cancel "old" builds and run/(re)start the build with the latest changes
  group: ${{ github.ref == 'refs/heads/main' && format('ci-main-{0}-{1}', github.workflow, github.sha) || format('ci-{0}-{1}', github.workflow, github.ref) }}

jobs:
  matrix_setup:
    name: 'Setup Build Matrix'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: './docker/'

    permissions:
      contents: read

    env:
      REGISTRY: ghcr.io # GitHub Registry

    steps:
      - name: Git - Checkout
        id: git_checkout
        uses: actions/checkout@dcd71f646680f2efd8db4afa5ad64fdcba30e748 # tag=v3

      - name: Build Matrix - Setup
        id: set_matrix
        run: |
          echo "::set-output name=matrix::$(python3 -c 'import os, json; print(json.dumps(os.listdir(".")))')"
          echo "::set-output name=image_name_latest::${{ env.REGISTRY }}/${{ github.repository }}/{0}:latest"
          echo "::set-output name=image_name_git_tag::${{ env.REGISTRY }}/${{ github.repository }}/{0}:$(git rev-parse --short HEAD)"
          echo "::set-output name=docker_registry::${{ env.REGISTRY }}"
          echo "::set-output name=docker_working_dir::./docker"
          echo "::set-output name=docker_image_dir::/tmp"
          echo "::set-output name=docker_image_file::/tmp/image.tar"
          echo "::set-output name=docker_artifact_name::tmp_docker_image_{0}"

    outputs:
      matrix: ${{ steps.set_matrix.outputs.matrix }}
      image_name_latest: ${{ steps.set_matrix.outputs.image_name_latest }}
      image_name_git_tag: ${{ steps.set_matrix.outputs.image_name_git_tag }}
      docker_registry: ${{ steps.set_matrix.outputs.docker_registry }}
      docker_working_dir: ${{ steps.set_matrix.outputs.docker_working_dir }}
      docker_image_dir: ${{ steps.set_matrix.outputs.docker_image_dir }}
      docker_image_file: ${{ steps.set_matrix.outputs.docker_image_file }}
      docker_artifact_name: ${{ steps.set_matrix.outputs.docker_artifact_name }}

  code_quality:
    name: 'Code Quality Checks'
    needs: [matrix_setup]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        package: ${{ fromJson(needs.matrix_setup.outputs.matrix) }}

    defaults:
      run:
        shell: bash

    permissions:
      contents: read
      statuses: write

    steps:
      - name: Git - Checkout
        id: git_checkout
        uses: actions/checkout@dcd71f646680f2efd8db4afa5ad64fdcba30e748 # tag=v3

      - name: SuperLinter - Lint Dockerfile
        id: superlinter_scan
        uses: github/super-linter/slim@ae4e373c56efad95924d9cc6b89624fdb2333007 # tag=v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          FILTER_REGEX_INCLUDE: .*${{ needs.matrix_setup.outputs.docker_working_dir }}/${{ matrix.package }}/.*
          VALIDATE_ALL_CODEBASE: ${{ github.event_name != 'pull_request' }}
          VALIDATE_DOCKERFILE: true # dockerfilelint
          VALIDATE_DOCKERFILE_HADOLINT: true # hadolint

  docker_build:
    name: 'Build'
    needs: [matrix_setup]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        package: ${{ fromJson(needs.matrix_setup.outputs.matrix) }}

    defaults:
      run:
        shell: bash

    permissions:
      contents: read

    steps:
      - name: Git - Checkout
        id: git_checkout
        uses: actions/checkout@dcd71f646680f2efd8db4afa5ad64fdcba30e748 # tag=v3

      - name: Docker - Set-Up Environment
        id: docker_setup
        uses: docker/setup-buildx-action@94ab11c41e45d028884a99163086648e898eed25 # renovate: tag=v1

      - name: Docker - Build Artifact # but don't publish yet
        id: docker_build
        uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a # tag=v2
        with:
          context: ${{ needs.matrix_setup.outputs.docker_working_dir }}/${{ matrix.package }}
          push: false
          tags: ${{ format(needs.matrix_setup.outputs.image_name_latest, matrix.package) }},${{ format(needs.matrix_setup.outputs.image_name_git_tag, matrix.package) }}
          # platforms: ${{ steps.docker_setup.outputs.platforms }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # https://github.com/docker/build-push-action/issues/225#issuecomment-727639184
          # https://github.com/docker/buildx/blob/bcfd4348290ecb67122a882e0ef42aa537a51ae6/docs/reference/buildx_build.md#output
          outputs: type=docker,dest=${{ needs.matrix_setup.outputs.docker_image_file }}

      - name: GitHub - Upload Image Artifact
        id: github_upload_image
        uses: actions/upload-artifact@6673cd052c4cd6fcf4b4e6e60ea986c889389535 # tag=v3
        with:
          name: ${{ format(needs.matrix_setup.outputs.docker_artifact_name, matrix.package) }}
          path: ${{ needs.matrix_setup.outputs.docker_image_file }}
          retention-days: 1

  docker_test:
    name: 'Test'
    needs: [matrix_setup, docker_build]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        package: ${{ fromJson(needs.matrix_setup.outputs.matrix) }}

    env:
      GOSS_VERSION: v0.3.16

    defaults:
      run:
        shell: bash

    permissions:
      contents: read

    steps:
      - name: Git - Checkout
        id: git_checkout
        uses: actions/checkout@dcd71f646680f2efd8db4afa5ad64fdcba30e748 # tag=v3

      - name: GitHub - Download Image Artifact
        id: github_download_image
        uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741 # tag=v3
        with:
          name: ${{ format(needs.matrix_setup.outputs.docker_artifact_name, matrix.package) }}
          path: ${{ needs.matrix_setup.outputs.docker_image_dir }}

      - name: GitHub - Get Test Parameter
        id: test_parameter
        run: |
          TEST_WORKING_DIR=${{ needs.matrix_setup.outputs.docker_working_dir }}/${{ matrix.package }}/tests
          echo "::set-output name=test_working_dir::${TEST_WORKING_DIR}"
          echo "::set-output name=test_result_file::goss_test_results.xml"
          echo "::set-output name=container_logs_name::container_logs_{0}.log"
          mkdir -p ${TEST_WORKING_DIR}

      - name: Docker - Load Image
        id: docker_load
        run: docker image load --input ${{ needs.matrix_setup.outputs.docker_image_file }} && docker images

      - name: Docker - Pre Test Setup
        id: docker_setup
        run: |
          SETUP_FILE=./setup.sh
          if test -f "$SETUP_FILE"; then
            echo "$SETUP_FILE exists. Going to run setup:"
            sh ./$SETUP_FILE
          else
            echo "$SETUP_FILE does not exist. Skip setup."
          fi
        working-directory: ${{ steps.test_parameter.outputs.test_working_dir }}
        env:
          IMAGE_NAME: ${{ format(needs.matrix_setup.outputs.image_name_latest, matrix.package) }}

      - name: Goss - Setup
        uses: e1himself/goss-installation-action@88e5a33ec3f7d299fee2e259ff1a6032cb0cdd11 # renovate: tag=v1.0.4
        with:
          version: ${{ env.GOSS_VERSION }}

      - name: GitHub - Check for Test File Existence
        id: check_test_file
        uses: andstor/file-existence-action@f02338908d150e00a4b8bebc2dad18bd9e5229b0 # tag=v1.1.0
        with:
          files: ${{ steps.test_parameter.outputs.test_working_dir }}/goss.yaml

      - name: Goss - Test Docker Image
        id: goss_test
        if: steps.check_test_file.outputs.files_exists == 'true'
        # the service to test needs to be called "container_under_test" in the docker-compose.yaml file;
        # it's important to set DEBUG=true, else will the docker container logs be deleted after running the tests
        run: DEBUG=true dcgoss run container_under_test | tee ${{ steps.test_parameter.outputs.test_result_file }}
        working-directory: ${{ steps.test_parameter.outputs.test_working_dir }}
        env:
          IMAGE_NAME: ${{ format(needs.matrix_setup.outputs.image_name_latest, matrix.package) }}
          GOSS_OPTS: --format junit --max-concurrent 1
          GOSS_SLEEP: 30s

      - name: Docker - Post Test Teardown
        id: docker_teardown
        if: always()
        run: |
          echo "Running general teardown..."

          # sudo is required, otherwise "find" runs in permission errors
          CONTAINER_LOGS_FILE=$(sudo find /tmp/ -name 'docker_output.log')
          if test -f "$CONTAINER_LOGS_FILE"; then
            echo "Container logs found at \"$CONTAINER_LOGS_FILE\""
            cat "$CONTAINER_LOGS"

            echo "::set-output name=container_logs::${CONTAINER_LOGS_FILE}"
          else
            echo "No container logs found at \"$CONTAINER_LOGS_FILE\""

            FALLBACK_LOGS_FILE=".fallback.log"
            echo "no container logs available" > "$FALLBACK_LOGS_FILE"
            echo "::set-output name=container_logs::${FALLBACK_LOGS_FILE}"
          fi

          TEARDOWN_FILE=./teardown.sh
          if test -f "$TEARDOWN_FILE"; then
            echo "$TEARDOWN_FILE exists. Going to run service-specific teardown:"
            sh ./$TEARDOWN_FILE
          else
            echo "$TEARDOWN_FILE does not exist. Skip service-specific teardown."
          fi
        working-directory: ${{ steps.test_parameter.outputs.test_working_dir }}

      - name: GitHub - Upload Container Logs
        id: github_upload_logs
        if: always()
        uses: actions/upload-artifact@6673cd052c4cd6fcf4b4e6e60ea986c889389535 # tag=v3
        with:
          name: ${{ format(steps.test_parameter.outputs.container_logs_name, matrix.package) }}
          path: ${{ steps.test_parameter.outputs.test_working_dir }}/${{ steps.docker_teardown.outputs.container_logs }}
          retention-days: 7

      - name: GitHub - Generate App Token
        id: github_generate_app_token
        uses: tibdex/github-app-token@586e1a624db6a5a4ac2c53daeeded60c5e3d50fe # tag=v1.5.2
        if: always() && steps.check_test_file.outputs.files_exists == 'true'
        with:
          # # https://github.com/EnricoMi/publish-unit-test-result-action/issues/161
          app_id: ${{ secrets.UNIT_TEST_RESULTS_REPORTER_APP_ID }}
          private_key: ${{ secrets.UNIT_TEST_RESULTS_REPORTER_PRIVATE_KEY }}

      - name: GitHub - Publish Unit Test Results
        id: github_publish_results
        uses: EnricoMi/publish-unit-test-result-action@0c8c54b3a1700e3d97e2efc1ccd68316af0eb6f6 # tag=v1.32
        if: always() && steps.check_test_file.outputs.files_exists == 'true'
        with:
          github_token: ${{ steps.github_generate_app_token.outputs.token }}
          check_name: Unit Test Results (Docker - ${{ matrix.package }})
          files: ${{ steps.test_parameter.outputs.test_working_dir }}/${{ steps.test_parameter.outputs.test_result_file }}

  container_security:
    name: 'Container Security Checks'
    needs: [matrix_setup, docker_build]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        package: ${{ fromJson(needs.matrix_setup.outputs.matrix) }}

    defaults:
      run:
        shell: bash

    permissions:
      contents: read
      security-events: write

    steps:
      - name: Git - Checkout
        id: git_checkout
        uses: actions/checkout@dcd71f646680f2efd8db4afa5ad64fdcba30e748 # tag=v3

      - name: GitHub - Download Image Artifact
        id: github_download_image
        uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741 # tag=v3
        with:
          name: ${{ format(needs.matrix_setup.outputs.docker_artifact_name, matrix.package) }}
          path: ${{ needs.matrix_setup.outputs.docker_image_dir }}

      - name: Docker - Load Image
        id: docker_load
        run: docker image load --input ${{ needs.matrix_setup.outputs.docker_image_file }} && docker images

      - name: Snyk - Check for Docker Image Vulnerabilities
        id: snyk_scan
        uses: snyk/actions/docker@7fad562681122205233d1242c3bb39598c5393da # renovate: tag=0.3.0
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ format(needs.matrix_setup.outputs.image_name_latest, matrix.package) }}
          # only report issues medium or higher (aka no low risk issues)
          args: --file=${{ needs.matrix_setup.outputs.docker_working_dir }}/${{ matrix.package }}/Dockerfile --severity-threshold=medium
          sarif: true

      - name: GitHub - Upload result to Code Scanning
        id: github_upload_sarif
        uses: github/codeql-action/upload-sarif@v1
        # always run, even if the previous step failed due to found vulnerabilities (so it vulnerabilities get reported)
        # only run if the sarif file exists
        # only run on pushes on the default branch
        if: hashFiles('snyk.sarif') != '' && github.event_name == 'push' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        with:
          sarif_file: snyk.sarif

  docker_publish:
    name: 'Publish'
    needs: [matrix_setup, code_quality, docker_build, docker_test, container_security]
    runs-on: ubuntu-latest

    if: github.event_name == 'push' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch) && !github.event.act

    strategy:
      matrix:
        package: ${{ fromJson(needs.matrix_setup.outputs.matrix) }}

    defaults:
      run:
        shell: bash

    permissions:
      contents: read
      packages: write

    steps:
      - name: Git - Checkout
        id: git_checkout
        uses: actions/checkout@dcd71f646680f2efd8db4afa5ad64fdcba30e748 # tag=v3
        with:
          fetch-depth: 2

      - name: Git - Get Changed Files
        id: git_changed_files
        uses: tj-actions/changed-files@450eadf5a0462f8d0b5e99d07d4b6d8f7358420c # tag=v5.0.0
        with:
          files: |
            ${{ needs.matrix_setup.outputs.docker_working_dir }}/${{ matrix.package }}/Dockerfile

      - name: GitHub - Download Image Artifact
        id: github_download_image
        uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741 # tag=v3
        if: steps.git_changed_files.outputs.any_changed == 'true'
        with:
          name: ${{ format(needs.matrix_setup.outputs.docker_artifact_name, matrix.package) }}
          path: ${{ needs.matrix_setup.outputs.docker_image_dir }}

      - name: Docker - Load Image
        id: docker_load
        if: steps.git_changed_files.outputs.any_changed == 'true'
        run: docker image load --input ${{ needs.matrix_setup.outputs.docker_image_file }}

      - name: Docker - Log into Registry ${{ needs.matrix_setup.outputs.docker_registry }}
        id: docker_login
        uses: docker/login-action@dd4fa0671be5250ee6f50aedf4cb05514abda2c7 # tag=v1
        if: steps.git_changed_files.outputs.any_changed == 'true'
        with:
          registry: ${{ needs.matrix_setup.outputs.docker_registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker - Publish Artifact
        id: docker_publish
        if: steps.git_changed_files.outputs.any_changed == 'true'
        run: |
          docker image push ${{ format(needs.matrix_setup.outputs.image_name_git_tag, matrix.package) }}
          docker image push ${{ format(needs.matrix_setup.outputs.image_name_latest, matrix.package) }}
