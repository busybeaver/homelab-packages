name: 'Snapcraft CI'

on:
  # run on pushes to main if snap related files were changed
  push:
    branches:
      - main
      - gh-readonly-queue/main/**
  # run on pull requests that target the main branch
  pull_request:
    branches:
      - main
  # run weekly on Monday at 12:00
  schedule:
    - cron: '0 12 * * 1'
  # trigger releases manually
  workflow_dispatch:
    inputs:
      publish_release:
        description: 'Publish release to the Snapcraft store'
        required: true
        type: choice
        default: 'false'
        options:
          - 'true'
          - 'false'

concurrency:
  # on main, we want all builds to complete even if commits/merging happens faster to make it easier to discover at which point
  # something broke; else, we cancel "old" builds and run/(re)start the build with the latest changes
  group: ${{ github.ref == 'refs/heads/main' && format('ci-main-{0}-{1}', github.workflow, github.sha) || format('ci-{0}-{1}', github.workflow, github.ref) }}

jobs:
  matrix_setup:
    name: 'Setup Build Matrix'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: './snaps/'

    permissions:
      contents: read

    steps:
      - name: Git - Checkout
        id: git_checkout
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # tag=v3.1.0

      - name: Build Matrix - Setup
        id: set_matrix
        run: |
          {
            echo "matrix=$(python3 -c 'import os, json; print(json.dumps(os.listdir(".")))')"
            echo "snap_working_dir=./snaps"
            echo "snap_dir=/tmp"
            echo "snap_artifact_name=tmp_snaps_{0}"
          } >> "$GITHUB_OUTPUT"

    outputs:
      matrix: ${{ steps.set_matrix.outputs.matrix }}
      snap_working_dir: ${{ steps.set_matrix.outputs.snap_working_dir }}
      snap_dir: ${{ steps.set_matrix.outputs.snap_dir }}
      snap_artifact_name: ${{ steps.set_matrix.outputs.snap_artifact_name }}

  snapcraft_build:
    name: 'Build'
    needs: [matrix_setup]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        package: ${{ fromJson(needs.matrix_setup.outputs.matrix) }}

    defaults:
      run:
        shell: bash

    permissions:
      contents: read

    steps:
      - name: Git - Checkout
        id: git_checkout
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # tag=v3.1.0

      - name: Snapcraft - Set up Build Environment
        id: snapcraft_setup
        # prefix all env variables with "CI_ENV_" to ensure these do not clash with env variables within the snapcraft build environment
        # https://gist.github.com/mihow/9c7f559807069a03e302605691f85572
        run: printenv | sed -e '/^#/d;/^\s*$/d' -e "s/'/'\\\''/g" -e "s/=\(.*\)/='\1'/g" | sed -e 's/^/CI_ENV_/' > .ci.env
        working-directory: ${{ needs.matrix_setup.outputs.snap_working_dir }}/${{ matrix.package }}

      - name: Snapcraft - Build Artifact
        id: snapcraft_build
        uses: snapcore/action-build@989705ff968611277779118c9990c34af832840d # tag=v1.1.1
        with:
          path: ${{ needs.matrix_setup.outputs.snap_working_dir }}/${{ matrix.package }}

      - name: GitHub - Upload Snap Artifact
        id: github_upload_snap
        uses: actions/upload-artifact@83fd05a356d7e2593de66fc9913b3002723633cb # tag=v3.1.1
        with:
          name: ${{ format(needs.matrix_setup.outputs.snap_artifact_name, matrix.package) }}
          path: ${{ needs.matrix_setup.outputs.snap_working_dir }}/${{ matrix.package }}/*.snap
          retention-days: 1

  snapcraft_test:
    name: 'Install and Test'
    needs: [matrix_setup, snapcraft_build]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        package: ${{ fromJson(needs.matrix_setup.outputs.matrix) }}

    env:
      GOSS_VERSION: v0.3.16

    defaults:
      run:
        shell: bash

    permissions:
      contents: read

    steps:
      - name: Git - Checkout
        id: git_checkout
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # tag=v3.1.0

      - name: GitHub - Download Snap Artifact
        id: github_download
        uses: actions/download-artifact@9782bd6a9848b53b110e712e20e42d89988822b7 # tag=v3.0.1
        with:
          name: ${{ format(needs.matrix_setup.outputs.snap_artifact_name, matrix.package) }}

      - name: yq - Setup
        id: yq_setup
        uses: mikefarah/yq@1f0881fb5faf371694bfa108753cda0b824f5037 # tag=v4.28.2

      - name: Snapcraft - Get Snap Build Information
        id: snapcraft_build_information
        run: |
          ls -la ${{ steps.github_download.outputs.download-path }}/
          echo "---"
          echo ${{ steps.github_download.outputs.download-path }}/${NAME}_${VERSION}_${ARCH}.snap
          echo "+++"

          NAME=$(yq eval --no-colors --exit-status '.name' snapcraft.yaml)
          VERSION=$(yq eval --no-colors --exit-status '.version' snapcraft.yaml)
          ARCH=$(uname -m)

          {
            echo "version=${VERSION}"
            echo "arch=${ARCH}"
            echo "snap_file=${{ steps.github_download.outputs.download-path }}/${NAME}_${VERSION}_${ARCH}.snap"
          } >> "$GITHUB_OUTPUT"
        working-directory: ${{ needs.matrix_setup.outputs.snap_working_dir }}/${{ matrix.package }}

      - name: GitHub - Get Test Parameter
        id: test_parameter
        run: |
          ls -la ${{ needs.matrix_setup.outputs.snap_dir }}
          ls -la ${{ steps.github_download.outputs.download-path }}
          echo ${{ needs.snapcraft_build.outputs[format('{0}', matrix.package)] }}

          TEST_WORKING_DIR=${{ needs.matrix_setup.outputs.snap_working_dir }}/${{ matrix.package }}/tests
          {
            echo "test_working_dir=${TEST_WORKING_DIR}"
            echo "test_result_file=goss_test_results.xml"
            echo "snap_logs_name=snap_logs_{0}.log"
          } >> "$GITHUB_OUTPUT"
          mkdir -p ${TEST_WORKING_DIR}

      - name: Snapcraft - Pre Test Setup
        id: snapcraft_setup
        run: |
          echo "Install snap package:"
          sudo snap install --color=never --dangerous ${{ steps.snapcraft_build_information.outputs.snap_file }}
          SETUP_FILE=./setup.sh
          if test -f "$SETUP_FILE"; then
            echo "$SETUP_FILE exists. Going to run setup:"
            bash ./$SETUP_FILE
          else
            echo "$SETUP_FILE does not exist. Skip setup."
          fi
        working-directory: ${{ steps.test_parameter.outputs.test_working_dir }}
        env:
          SERVICE_NAME: ${{ matrix.package }}

      - name: Goss - Setup
        uses: e1himself/goss-installation-action@88e5a33ec3f7d299fee2e259ff1a6032cb0cdd11 # renovate: tag=v1.0.4
        with:
          version: ${{ env.GOSS_VERSION }}

      - name: GitHub - Check for Test File Existence
        id: check_test_file
        uses: andstor/file-existence-action@f02338908d150e00a4b8bebc2dad18bd9e5229b0 # tag=v1.1.0
        with:
          files: ${{ steps.test_parameter.outputs.test_working_dir }}/goss.yaml

      - name: Goss - Test Artifact
        id: goss_test
        if: steps.check_test_file.outputs.files_exists == 'true'
        run: goss validate --format junit --max-concurrent 1 | tee ${{ steps.test_parameter.outputs.test_result_file }}
        working-directory: ${{ steps.test_parameter.outputs.test_working_dir }}
        env:
          SERVICE_NAME: ${{ matrix.package }}

      - name: Snapcraft - Post Test Teardown
        id: snapcraft_teardown
        if: always()
        run: |
          TEARDOWN_FILE=./teardown.sh
          if test -f "$TEARDOWN_FILE"; then
            echo "$TEARDOWN_FILE exists. Going to run service-specific teardown:"
            bash ./$TEARDOWN_FILE
          else
            echo "$TEARDOWN_FILE does not exist. Skip service-specific teardown."
          fi

          echo "Running general teardown..."
          SNAP_LOGS_FILE="snap_${SERVICE_NAME}.log"
          # according to the shellcheck docs, the check should be disabled in this scenario (see last bullet point):
          # https://github.com/koalaman/shellcheck/wiki/SC2024#rationale
          # shellcheck disable=SC2024
          sudo snap logs "${SERVICE_NAME}" > "$SNAP_LOGS_FILE"
          echo "snap_logs=$(pwd)/${SNAP_LOGS_FILE}" >> "$GITHUB_OUTPUT"
          echo "Snap logs found at \"$SNAP_LOGS_FILE\":"
          cat "$SNAP_LOGS_FILE"
        working-directory: ${{ steps.test_parameter.outputs.test_working_dir }}
        env:
          SERVICE_NAME: ${{ matrix.package }}

      - name: GitHub - Upload Snap Logs
        id: github_upload_logs
        if: always()
        uses: actions/upload-artifact@83fd05a356d7e2593de66fc9913b3002723633cb # tag=v3.1.1
        with:
          name: ${{ format(steps.test_parameter.outputs.snap_logs_name, matrix.package) }}
          path: ${{ steps.snapcraft_teardown.outputs.snap_logs }}
          retention-days: 7

      - name: GitHub - Generate App Token
        id: github_generate_app_token
        uses: tibdex/github-app-token@021a2405c7f990db57f5eae5397423dcc554159c # tag=v1.7.0
        if: always() && steps.check_test_file.outputs.files_exists == 'true'
        with:
          # https://github.com/EnricoMi/publish-unit-test-result-action/issues/161
          app_id: ${{ secrets.UNIT_TEST_RESULTS_REPORTER_APP_ID }}
          private_key: ${{ secrets.UNIT_TEST_RESULTS_REPORTER_PRIVATE_KEY }}

      - name: GitHub - Publish Unit Test Results
        id: github_publish_results
        uses: EnricoMi/publish-unit-test-result-action@713caf1dd6f1c273144546ed2d79ca24a01f4623 # tag=v2.1.0
        if: always() && steps.check_test_file.outputs.files_exists == 'true'
        with:
          github_token: ${{ steps.github_generate_app_token.outputs.token }}
          check_name: Test Results (Snap - ${{ matrix.package }})
          junit_files: ${{ steps.test_parameter.outputs.test_working_dir }}/${{ steps.test_parameter.outputs.test_result_file }}
          # we only add github checks to the PR/commit, but don't create PR comments; reason is that comments will not
          # be replaced but always newly added due to (it looks for "github-actions" user instead of the github app user):
          # https://github.com/EnricoMi/publish-unit-test-result-action/blob/ae7c14a87cf1a1200805b487debc65963bdb3f2d/python/publish/publisher.py#L493
          comment_mode: off

  snapcraft_publish:
    name: 'Publish'
    needs: [matrix_setup, snapcraft_test, snapcraft_build]
    runs-on: ubuntu-latest

    if: github.event_name == 'workflow_dispatch' && github.event.inputs.publish_release == 'true' && !github.event.act

    strategy:
      matrix:
        package: ${{ fromJson(needs.matrix_setup.outputs.matrix) }}
        arch: ['amd64', 'arm64'] # as defined in the snapcraft.yaml files

    defaults:
      run:
        shell: bash

    permissions:
      contents: read

    steps:
      - name: GitHub - Download Snap Artifact
        id: github_download
        uses: actions/download-artifact@9782bd6a9848b53b110e712e20e42d89988822b7 # tag=v3.0.1
        with:
          name: ${{ format(needs.matrix_setup.outputs.snap_artifact_name, matrix.package) }}
          path: ${{ needs.matrix_setup.outputs.snap_dir }}

      - name: Snapcraft - Publish Artifact
        id: snapcraft_publish
        uses: snapcore/action-publish@0a8d537ae06f4a292e8b4ef1084cd5631b3c6871 # tag=v1.1.1
        with:
          # Generate via snapcraft (available on ubuntu or via 'brew' on macOS):
          # snapcraft export-login --snaps="nomad-homelab,consul-homelab" --acls="package_access,package_push,package_update,package_release" exported.txt
          store_login: ${{ secrets.SNAPCRAFT_STORE_LOGIN }}
          snap: ${{ needs.matrix_setup.outputs.snap_file }}
          # https://github.community/t/do-expressions-support-ternary-operators-to-change-their-returned-value/18114/3
          # The condition evaluates to a boolean, which is implicitly cast to a number and used as array index, where false = 0 and true = 1.
          release: ${{ fromJSON('["edge", "stable"]')[github.ref == format('refs/heads/{0}', github.event.repository.default_branch)] }}
